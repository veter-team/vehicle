video-sensor.Endpoints=tcp -p 10030

# Set auto exposure off and brightness to default
#Camera.controls=10094851 10092544 0, 9963776 9961472 128
#Camera.controls=10094851 10092544 0
#Camera.controls=

# OpenMax-based encoding pipeline for GStreamer-1.0 running on RaspberryPi
#Encoding.Pipeline=v4l2src ! video/x-raw,width=640,height=480 ! omxh264enc ! rtph264pay pt=96 ! appsink name=icesink

# Test pipeline which should work on Linux and Windows

# works perfect when encoding on PC
#Encoding.Pipeline=v4l2src do-timestamp=true ! video/x-raw-yuv,width=320,height=240,framerate=30/1 ! theoraenc name=encoder bitrate=300 ! rtptheorapay config-interval=10 ! appsink name=icesink

#Encoding.Pipeline=videotestsrc is-live=true ! video/x-raw-yuv,width=640,height=480,framerate=30/1 ! theoraenc name=encoder bitrate=300 ! rtptheorapay ! appsink name=icesink

#Encoding.Pipeline=filesrc location=geekbeattv--0049--2010-15--large.h264.mp4 ! qtdemux ! ffdec_h264 ! videoscale name=qos-scaler ! capsfilter name=qos-caps caps=video/x-raw-yuv,width=320,height=240 ! tee name=t ! queue2 ! x264enc name=encoder byte-stream=true bitrate=300 speed-preset=superfast subme=6 ! rtph264pay pt=96 ! appsink name=icesink t. ! queue2 ! ffmpegcolorspace ! autovideosink

#Encoding.Pipeline=filesrc blocksize=10000 location=/home/monk/projects/veter/unversioned/misc/big_buck_bunny_480p_h264.mov ! qtdemux ! ffdec_h264 ! videoscale name=qos-scaler ! capsfilter name=qos-caps caps=video/x-raw-yuv,width=320,height=240 ! tee name=t ! queue2 ! x264enc name=encoder byte-stream=true bitrate=300 speed-preset=superfast subme=6 ! rtph264pay pt=96 ! appsink name=icesink t. ! queue2 ! ffmpegcolorspace ! autovideosink

#Encoding.Pipeline=filesrc blocksize=10000 location=/home/monk/projects/veter/unversioned/misc/big_buck_bunny_320x240_bytestream.avi ! avidemux ! decodebin2 ! videoscale name=qos-scaler ! capsfilter name=qos-caps caps=video/x-raw-yuv,width=320,height=240 ! tee name=t ! queue2 ! x264enc name=encoder byte-stream=true bitrate=300 speed-preset=superfast subme=6 ! rtph264pay pt=96 ! appsink name=icesink t. ! queue2 ! ffmpegcolorspace ! autovideosink

# this one works on pc but with big latency
# I suspect that latency is introduced by encoder (x264enc)
#Encoding.Pipeline=v4l2src do-timestamp=true ! video/x-raw-yuv,width=320,height=240,framerate=30/1 ! videoscale name=qos-scaler ! capsfilter name=qos-caps caps=video/x-raw-yuv,width=320,height=240 ! x264enc name=encoder byte-stream=true bitrate=300 speed-preset=superfast subme=6 ! rtph264pay pt=96 ! appsink name=icesink

#Encoding.Pipeline=v4l2src ! queue2 ! videorate ! video/x-raw-yuv,width=320,height=240,framerate=30/1 ! videoscale name=qos-scaler ! capsfilter name=qos-caps caps=video/x-raw-yuv,width=320,height=240 ! vp8enc ! webmmux streamable=true min-index-interval=1000000000 ! appsink name=icesink

#Encoding.Pipeline=videotestsrc is-live=true ! video/x-raw-yuv,width=640,height=480,framerate=30/1 ! videoscale name=qos-scaler ! capsfilter name=qos-caps caps=video/x-raw-yuv,width=640,height=480 ! x264enc byte-stream=true bitrate=300 ! rtph264pay pt=96 ! appsink name=icesink

# This one works fine on BeagleBoard

#Encoding.Pipeline=v4l2src always-copy=FALSE ! video/x-raw-yuv,width=320,height=240,framerate=30/1 ! videoscale name=qos-scaler ! capsfilter name=qos-caps caps=video/x-raw-yuv,width=320,height=240 ! ffmpegcolorspace ! video/x-raw-yuv,format=(fourcc)UYVY ! TIVidenc1 codecName=h264enc engineName=codecServer encodingPreset=2 genTimeStamps=TRUE byteStream=TRUE ! rtph264pay pt=96 ! appsink name=icesink

Encoding.Pipeline=v4l2src device=/dev/video1 always-copy=FALSE ! video/x-raw-yuv,width=360,height=288,format=(fourcc)UYVY ! TIVidenc1 codecName=h264enc engineName=codecServer encodingPreset=3 genTimeStamps=TRUE byteStream=TRUE ! rtph264pay pt=96 ! appsink name=icesink

# Pipeline for stereo
#Encoding.Pipeline=v4l2src device=/dev/video0 ! video/x-raw-yuv,width=360,framerate=5/1,height=288,format=(fourcc)UYVY ! videobox left=0 ! videomixer name=mix ! ffmpegcolorspace ! TIVidenc1 codecName=h264enc engineName=codecServer encodingPreset=3 genTimeStamps=TRUE byteStream=TRUE ! rtph264pay pt=96 ! appsink name=icesink v4l2src device=/dev/video1 ! video/x-raw-yuv,width=360,height=288,framerate=5/1,format=(fourcc)UYVY ! videobox left=-360 ! mix.
#Encoding.Pipeline=v4l2src device=/dev/video1 always-copy=FALSE ! video/x-raw-yuv,width=320,height=240,format=(fourcc)UYVY ! videomixer name=mix ! ffmpegcolorspace ! TIVidenc1 codecName=h264enc engineName=codecServer encodingPreset=3 genTimeStamps=TRUE byteStream=TRUE ! rtph264pay pt=96 ! appsink name=icesink v4l2src device=/dev/video0 always-copy=FALSE ! video/x-raw-yuv,width=320,height=240,format=(fourcc)UYVY ! videobox left=-320 ! mix.

# Experimenting with video mixer for rear camera
#Encoding.Pipeline=videotestsrc pattern="snow" ! video/x-raw-yuv,framerate=30/1,width=80,height=60 ! videomixer name=mix ! videoscale name=qos-scaler ! capsfilter name=qos-caps caps=video/x-raw-yuv,width=320,height=240 ! ffmpegcolorspace ! video/x-raw-yuv,format=(fourcc)UYVY ! TIVidenc1 codecName=h264enc engineName=codecServer bitRate=320000 encodingPreset=2 genTimeStamps=TRUE byteStream=TRUE ! rtph264pay pt=96 ! appsink name=icesink v4l2src always-copy=FALSE ! video/x-raw-yuv,width=320,height=240,framerate=30/1 ! mix.

# This pipeline uses the second (rear) camera and mix small image to the top left corner
#Encoding.Pipeline=v4l2src device=/dev/video0 always-copy=FALSE ! video/x-raw-yuv,width=320,height=240,format=(fourcc)UYVY ! videoscale ! capsfilter caps=video/x-raw-yuv,width=80,height=60,format=(fourcc)UYVY ! videomixer name=mix ! TIVidenc1 codecName=h264enc engineName=codecServer encodingPreset=3 genTimeStamps=TRUE byteStream=TRUE ! rtph264pay pt=96 ! appsink name=icesink v4l2src device=/dev/video1 always-copy=FALSE ! video/x-raw-yuv,format=(fourcc)UYVY,width=320,height=240 ! mix.

# This pipeline uses TIVidResize (but does not have qos-scaler because we are currently not setting format(fourcc) in caps filter  properly in the vehicle application.
#Encoding.Pipeline=v4l2src always-copy=FALSE ! video/x-raw-yuv,format=(fourcc)YUY2,width=640,height=480,framerate=30/1 ! ffmpegcolorspace ! video/x-raw-yuv,format=(fourcc)UYVY ! TIVidResize name=qos-scaler contiguousInputFrame=TRUE ! video/x-raw-yuv,format=(fourcc)UYVY,width=640,height=480 ! TIVidenc1 codecName=h264enc engineName=codecServer bitRate=320000 encodingPreset=2 genTimeStamps=TRUE byteStream=TRUE ! rtph264pay pt=96 ! appsink name=icesink 

# This one works but too slow on BeagleBoard because it runs on ARM and do not use DSP
#Encoding.Pipeline=v4l2src ! video/x-raw-yuv,width=320,height=240,framerate=30/1 ! theoraenc bitrate=300 ! oggmux ! appsink name=icesink

# Note: setting byteStream=TRUE leads to the big latency.
# It seams like using jitterbuffer in the decoding pipeline can reduce this latency
#Encoding.Pipeline=v4l2src always-copy=FALSE ! video/x-raw-yuv,width=320,height=240,framerate=30/1 ! ffmpegcolorspace ! video/x-raw-yuv, format=(fourcc)UYVY ! TIVidenc1 codecName=h264enc engineName=codecServer bitRate=30 genTimeStamps=TRUE byteStream=FALSE ! rtph264pay pt=96 ! appsink name=icesink

# This is an attempt to use DSP-based TIVidResize to perform color convertion 
# on DSP instead of using ffmpegcolorspace on ARM.
# Do not know why it does not work. Need to investigate further
#Encoding.Pipeline=v4l2src always-copy=FALSE ! video/x-raw-yuv,width=320,height=240 ! TIVidResize contiguousInputFrame=TRUE ! video/x-raw-yuv,format=(fourcc)UYVY,width=320,height=240 ! TIVidenc1 codecName=h264enc engineName=codecServer bitRate=30000 genTimeStamps=TRUE byteStream=FALSE ! rtph264pay pt=96 ! appsink name=icesink

# Experimenting with matroskamux without rtp264pay. 
# I was expecting that it should work, but it does not. 
# Need to investigate further.
#Encoding.Pipeline=v4l2src always-copy=FALSE ! video/x-raw-yuv,width=320,height=240,framerate=30/1 ! ffmpegcolorspace ! TIVidenc1 codecName=h264enc engineName=codecServer genTimeStamps=FALSE contiguousInputFrame=FALSE ! matroskamux ! appsink name=icesink

Ice.ThreadPool.Client.Size=3
Ice.ThreadPool.Client.SizeWarn=4
Ice.ThreadPool.Client.SizeMax=5

Ice.ThreadPool.Server.Size=3
Ice.ThreadPool.Server.SizeWarn=4
Ice.ThreadPool.Server.SizeMax=5


#
# Warn about connection exceptions
#
Ice.Warn.Connections=1

#
# We want a faster ACM for this demo.
#
#Ice.ConnectionIdleTime=10

#
# Network Tracing
#
# 0 = no network tracing
# 1 = trace connection establishment and closure
# 2 = like 1, but more detailed
# 3 = like 2, but also trace data transfer
#
Ice.Trace.Network=1

#
# Protocol Tracing
#
# 0 = no protocol tracing
# 1 = trace protocol messages
#
Ice.Trace.Protocol=0

